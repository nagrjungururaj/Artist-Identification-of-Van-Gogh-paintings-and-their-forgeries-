% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created Mon Jan 16 22:50:10 CET 2017
%
% This script assumes these variables are defined:
%
%   energy - input data.
%   c - target data.

clc;
clear all;
%load('path\wholedata_hsv.mat');
% load('path\final_gabor.mat');
load('path\mean_var.mat');

load('C:\Users\Admin\Desktop\proj\data_final\target_new.mat');
x = final';
%x = whole';
t = t1';

% Create a Pattern Recognition Network
hiddenLayerSize = 50;
net = patternnet(hiddenLayerSize);

% Setup Division of Data for Training, Validation, Testing

% net.divideFcn= 'divideind';
% net.divideParam.trainInd= 1:55407;  training data indices 
% net.divideParam.testInd= 55408:70272; testing data indices 
% net.divideParam.valInd= 70273:70981;  validation data indices 

net.divideFcn= 'divideind';
net.divideParam.trainInd= 1:260;  %training data indices 
net.divideParam.testInd= 261:327; %testing data indices 
net.divideParam.valInd= 328:331;  %validation data indices 


% Train the Network
net.trainFcn='trainscg';
net.trainParam.max_fail = 10000;
net.trainParam.min_grad=2e-6;
net.trainParam.epochs=1000;
net.trainParam.goal=0;
net.trainParam.sigma=5e-6;
net.trainParam.lambda= 5.0e-7;
[net,tr] = train(net,x,t);

% Test the Network
view(net)
y = net(x);
e = gsubtract(t,y);
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);
performance = perform(net,t,y)


for i = 1:net.numLayers  %i = 1:2
    net.layers{i}.initFcn = 'initwb';
    for j = 1:net.numLayers  %j = 1:2
        if net.layerConnect(i,j) == 1
                net.layerWeights{i,j}.initFcn = 'initzero';
        end
    end
end
for k = 1:net.numInputs %k = 1:2
    net.inputWeights{1,k}.initFcn = 'initzero';
end
net = configure(net,x,t);
net = init(net);
for l = 1:net.numInputs  %l = 1:2
     net.iw{1,l} =   ones(hiddenLayerSize,length(net.inputWeights{1,l}.delays)*net.inputs{l}.size);
end
